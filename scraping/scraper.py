from selenium import webdriver
from selenium.webdriver.edge.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from datetime import datetime
import time # Necesario para time.sleep en los reintentos

# ================================
# FUNCIONES PRINCIPALES
# ================================

def crear_driver(edge_path, headless=False):
    service = Service(edge_path)
    options = webdriver.EdgeOptions()
    if headless:
        options.add_argument("--headless")
    options.add_argument("--start-maximized")
    return webdriver.Edge(service=service, options=options)

def iniciar_sesion(driver, usuario, contrase√±a):
    print("üîê Iniciando sesi√≥n...")
    driver.get("https://www.instagram.com/accounts/login/")
    
    # Esperar que el campo de usuario est√© presente y escribir el usuario
    WebDriverWait(driver, 15).until(
        EC.presence_of_element_located((By.NAME, "username"))
    ).send_keys(usuario)
    
    # Escribir la contrase√±a y enviar (simulando Enter)
    driver.find_element(By.NAME, "password").send_keys(contrase√±a + "\n")

    # Manejar popup "Guardar informaci√≥n de inicio de sesi√≥n"
    # Intenta hacer clic en "Ahora no" si aparece el popup.
    # Instagram puede usar diferentes elementos/textos, estos son algunos comunes.
    save_info_not_now_xpaths = [
        "//button[text()='Ahora no']",
        "//div[@role='button'][text()='Ahora no']",
        "//button[contains(text(),'Ahora no')]"
    ]
    popup_handled = False
    for xpath_expr in save_info_not_now_xpaths:
        try:
            WebDriverWait(driver, 7).until( # Espera m√°s corta para este popup espec√≠fico
                EC.element_to_be_clickable((By.XPATH, xpath_expr))
            ).click()
            print("‚ÑπÔ∏è Popup 'Guardar informaci√≥n de inicio de sesi√≥n' cerrado con 'Ahora no'.")
            popup_handled = True
            break 
        except:
            continue 
    if not popup_handled:
        print("‚ÑπÔ∏è No se encontr√≥ o no se pudo cerrar el popup 'Guardar informaci√≥n de inicio de sesi√≥n' (puede que no haya aparecido).")

    # Manejar popup "Activar notificaciones"
    # Este popup suele aparecer despu√©s del de "Guardar informaci√≥n".
    try:
        WebDriverWait(driver, 7).until( # Espera m√°s corta
            EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Ahora no')]"))
        ).click()
        print("‚ÑπÔ∏è Popup 'Activar notificaciones' cerrado con 'Ahora no'.")
    except:
        print("‚ÑπÔ∏è No se encontr√≥ o no se pudo cerrar el popup 'Activar notificaciones' (puede que no haya aparecido o ya se haya manejado).")

    # Confirmaci√≥n final: Esperar a que un elemento clave de la p√°gina de inicio est√© presente.
    home_page_indicators = [
        (By.XPATH, "//*[local-name()='svg'][@aria-label='Inicio']"), # Icono de Inicio (SVG)
        (By.XPATH, "//input[@placeholder='Buscar']") # Barra de b√∫squeda
    ]
    logged_in_successfully = False
    for indicator_type, indicator_value in home_page_indicators:
        try:
            WebDriverWait(driver, 15).until(EC.presence_of_element_located((indicator_type, indicator_value)))
            print(f"‚úÖ Sesi√≥n iniciada correctamente y p√°gina principal cargada (Indicador: {indicator_value}).")
            logged_in_successfully = True
            break
        except:
            continue
    
    if not logged_in_successfully:
        print(f"‚ö†Ô∏è No se pudo confirmar la carga de la p√°gina principal despu√©s del login. El scraping podr√≠a fallar.")
        # Considerar lanzar una excepci√≥n si el login es cr√≠tico:
        # raise Exception("Fallo en el inicio de sesi√≥n o la p√°gina principal no carg√≥ correctamente.")

def obtener_estadisticas(driver, perfil):
    url = f"https://www.instagram.com/{perfil}/"
    MAX_REINTENTOS = 3
    ESPERA_ENTRE_REINTENTOS_SEGUNDOS = 5

    for intento in range(MAX_REINTENTOS):
        print(f"\nüì• Analizando perfil: {perfil} (Intento {intento + 1}/{MAX_REINTENTOS})")
        try:
            driver.get(url)
            
            # Esperar a que el header del perfil (que contiene las estad√≠sticas) est√© presente
            header_xpath = "//header"
            WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.XPATH, header_xpath))
            )
            # Una peque√±a pausa opcional para asegurar que todo el contenido din√°mico cargue
            time.sleep(2) 

            # XPaths para los datos. Estos pueden necesitar ajustes si Instagram cambia su estructura.
            # El XPath para publicaciones es el m√°s propenso a cambiar si el orden de los `li` var√≠a.
            publicaciones_xpath = f"//header//ul/li[1]//span | //header//li[1]//span[@data-bloks-name='bk.components.Text']" # Intenta ser m√°s general
            # Para seguidores y seguidos, buscar por el enlace que los contiene es m√°s robusto
            seguidores_xpath = f"//a[contains(@href, '/{perfil}/followers/')]/span/span | //a[contains(@href, '/{perfil}/followers/')]/span[@title] | //header//ul/li[2]//span"
            seguidos_xpath = f"//a[contains(@href, '/{perfil}/following/')]/span/span | //a[contains(@href, '/{perfil}/following/')]/span | //header//ul/li[3]//span"

            # Esperar a que cada elemento espec√≠fico est√© presente antes de extraer el texto
            publicaciones_element = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, publicaciones_xpath)))
            publicaciones = publicaciones_element.text.strip()
            
            seguidores_element = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, seguidores_xpath)))
            # A veces el n√∫mero de seguidores est√° en el atributo 'title' para n√∫meros grandes (ej. "1,234,567 seguidores")
            seguidores = seguidores_element.get_attribute("title") or seguidores_element.text.strip()

            seguidos_element = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, seguidos_xpath)))
            seguidos = seguidos_element.text.strip()

            print(f"üìä Perfil: {perfil} - Publicaciones: {publicaciones}, Seguidores: {seguidores}, Seguidos: {seguidos}")

            return {
                "usuario": perfil,
                "publicaciones": publicaciones,
                "seguidores": seguidores,
                "seguidos": seguidos,
                "fecha": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }

        except (TimeoutException, NoSuchElementException) as e:
            print(f"‚ö†Ô∏è Error al extraer estad√≠sticas de {perfil} (Intento {intento + 1}): {type(e).__name__}. Reintentando...")
            if intento + 1 == MAX_REINTENTOS:
                print(f"‚ùå Fallo final al extraer estad√≠sticas de {perfil} despu√©s de {MAX_REINTENTOS} intentos.")
                return None
            time.sleep(ESPERA_ENTRE_REINTENTOS_SEGUNDOS)
        except Exception as e: # Captura cualquier otra excepci√≥n inesperada
            print(f"üö® Error inesperado y grave al extraer estad√≠sticas de {perfil}: {e}")
            return None # No reintentar en errores gen√©ricos desconocidos
    return None # Si todos los intentos fallan
